{
  "version": 4,
  "terraform_version": "1.8.5",
  "serial": 8,
  "lineage": "311d1f09-b575-1995-7e10-d9e86d442be0",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "passwd-policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": [
              "CAPABILITY_AUTO_EXPAND",
              "CAPABILITY_IAM"
            ],
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:876507653007:stack/elevate-password-policy/ef96e960-24b5-11ef-b778-0e986e66b2cd",
            "name": "elevate-password-policy",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "StackName": "elevate-password-policy",
              "TemplateID": "security/account-password-policy",
              "TemplateVersion": "__VERSION__"
            },
            "parameters": {
              "AllowUsersToChangePassword": "true",
              "HardExpiry": "false",
              "LogsRetentionInDays": "90",
              "MaxPasswordAge": "90",
              "MinimumPasswordLength": "6",
              "PasswordReusePrevention": "24",
              "PermissionsBoundary": "",
              "RequireLowercaseCharacters": "true",
              "RequireNumbers": "true",
              "RequireSymbols": "true",
              "RequireUppercaseCharacters": "true"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "tags_all": {},
            "template_body": "AWSTemplateFormatVersion: '2010-09-09'\r\n\r\nDescription: 'Password Policy for Cloud Elevate AWS Accounts.'\r\n\r\nParameters:\r\n  PermissionsBoundary:\r\n    Description: 'Optional - ARN for a policy that will be used as the permission boundary for all roles created by this template.'\r\n    Type: String\r\n    Default: ''\r\n  MinimumPasswordLength:\r\n    Description: 'You can specify the minimum number of characters allowed in an IAM user password.'\r\n    Type: Number\r\n    Default: 25\r\n    ConstraintDescription: 'Must be in the range [6-128]'\r\n    MinValue: 6\r\n    MaxValue: 128\r\n  RequireUppercaseCharacters:\r\n    Description: 'You can require that IAM user passwords contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).'\r\n    Type: String\r\n    Default: true\r\n    AllowedValues:\r\n    - true\r\n    - false\r\n  RequireLowercaseCharacters:\r\n    Description: 'You can require that IAM user passwords contain at least one lowercase character from the ISO basic Latin alphabet (a to z).'\r\n    Type: String\r\n    Default: true\r\n    AllowedValues:\r\n    - true\r\n    - false\r\n  RequireNumbers:\r\n    Description: 'You can require that IAM user passwords contain at least one numeric character (0 to 9).'\r\n    Type: String\r\n    Default: true\r\n    AllowedValues:\r\n    - true\r\n    - false\r\n  RequireSymbols:\r\n    Description: 'You can require that IAM user passwords contain at least one of the following nonalphanumeric characters: ! @ # $ % ^ \u0026 * ( ) _ + - = [ ] {} | '''\r\n    Type: String\r\n    Default: true\r\n    AllowedValues:\r\n    - true\r\n    - false\r\n  MaxPasswordAge:\r\n    Description: 'You can set IAM user passwords to be valid for only the specified number of days. Choose 0 if you don not want passwords to expire.'\r\n    Type: Number\r\n    Default: 90\r\n    ConstraintDescription: 'Must be in the range [0-1095]'\r\n    MinValue: 0\r\n    MaxValue: 1095\r\n  PasswordReusePrevention:\r\n    Description: 'You can prevent IAM users from reusing a specified number of previous passwords.'\r\n    Type: Number\r\n    Default: 24\r\n    ConstraintDescription: 'Must be in the range [0-24]'\r\n    MinValue: 0\r\n    MaxValue: 24\r\n  AllowUsersToChangePassword:\r\n    Description: 'You can permit all IAM users in your account to use the IAM console to change their own passwords.'\r\n    Type: String\r\n    Default: true\r\n    AllowedValues:\r\n    - true\r\n    - false\r\n  HardExpiry:\r\n    Description: 'You can prevent IAM users from choosing a new password after their current password has expired.'\r\n    Type: String\r\n    Default: false\r\n    AllowedValues:\r\n    - true\r\n    - false\r\n  LogsRetentionInDays:\r\n    Description: 'Specifies the number of days you want to retain log events in the specified log group.'\r\n    Type: Number\r\n    Default: 90\r\n    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]\r\n\r\nConditions:\r\n  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, '']]\r\n\r\nResources:\r\n  LambdaRole:\r\n    Type: 'AWS::IAM::Role'\r\n    Properties:\r\n      AssumeRolePolicyDocument:\r\n        Version: '2012-10-17'\r\n        Statement:\r\n        - Effect: Allow\r\n          Principal:\r\n            Service: 'lambda.amazonaws.com'\r\n          Action: 'sts:AssumeRole'\r\n      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundary, !Ref 'AWS::NoValue']\r\n      Policies:\r\n      - PolicyName: iam\r\n        PolicyDocument:\r\n          Statement:\r\n          - Effect: Allow\r\n            Action:\r\n            - 'iam:UpdateAccountPasswordPolicy'\r\n            - 'iam:DeleteAccountPasswordPolicy'\r\n            Resource: '*'\r\n\r\n  LambdaPolicy:\r\n    Type: 'AWS::IAM::Policy'\r\n    Properties:\r\n      Roles:\r\n      - !Ref LambdaRole\r\n      PolicyName: lambda\r\n      PolicyDocument:\r\n        Statement:\r\n        - Effect: Allow\r\n          Action:\r\n          - 'logs:CreateLogStream'\r\n          - 'logs:PutLogEvents'\r\n          Resource: !GetAtt 'LambdaLogGroup.Arn'\r\n\r\n  LambdaFunctionV2: \r\n    Type: 'AWS::Lambda::Function'\r\n    Properties:\r\n      Code:\r\n        ZipFile: |\r\n          'use strict';\r\n          const AWS = require('aws-sdk');\r\n          const response = require('cfn-response');\r\n          const iam = new AWS.IAM({apiVersion: '2010-05-08'});\r\n          exports.handler = (event, context, cb) =\u003e {\r\n            console.log(`Invoke: ${JSON.stringify(event)}`);\r\n            function done(err) {\r\n              if (err) {\r\n                console.log(`Error: ${JSON.stringify(err)}`);\r\n                response.send(event, context, response.FAILED, {});\r\n              } else {\r\n                response.send(event, context, response.SUCCESS, {});\r\n              }\r\n            }\r\n            if (event.RequestType === 'Delete') {\r\n              iam.deleteAccountPasswordPolicy({}, done);\r\n            } else if (event.RequestType === 'Create' || event.RequestType === 'Update') {\r\n              const params = {\r\n                MinimumPasswordLength: parseInt(event.ResourceProperties.MinimumPasswordLength, 10),\r\n                RequireSymbols: event.ResourceProperties.RequireSymbols === 'true',\r\n                RequireNumbers: event.ResourceProperties.RequireNumbers === 'true',\r\n                RequireUppercaseCharacters: event.ResourceProperties.RequireUppercaseCharacters === 'true',\r\n                RequireLowercaseCharacters: event.ResourceProperties.RequireLowercaseCharacters === 'true',\r\n                AllowUsersToChangePassword: event.ResourceProperties.AllowUsersToChangePassword === 'true',\r\n                HardExpiry: event.ResourceProperties.HardExpiry === 'true'\r\n              };\r\n              if (parseInt(event.ResourceProperties.MaxPasswordAge, 10) \u003e 0) {\r\n                params.MaxPasswordAge = parseInt(event.ResourceProperties.MaxPasswordAge, 10);\r\n              }\r\n              if (parseInt(event.ResourceProperties.PasswordReusePrevention, 10) \u003e 0) {\r\n                params.PasswordReusePrevention = parseInt(event.ResourceProperties.PasswordReusePrevention, 10);\r\n              }\r\n              iam.updateAccountPasswordPolicy(params, done);\r\n            } else {\r\n              cb(new Error(`unsupported RequestType: ${event.RequestType}`));\r\n            }\r\n          };\r\n      Handler: 'index.handler'\r\n      MemorySize: 128\r\n      Role: !GetAtt 'LambdaRole.Arn'\r\n      Runtime: 'nodejs16.x'\r\n      Timeout: 60\r\n\r\n  LambdaLogGroup:\r\n    Type: 'AWS::Logs::LogGroup'\r\n    Properties:\r\n      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionV2}'\r\n      RetentionInDays: !Ref LogsRetentionInDays\r\n\r\n  PasswordPolicy:\r\n    Type: 'Custom::PasswordPolicy'\r\n    DependsOn:\r\n    - LambdaLogGroup\r\n    - LambdaPolicy\r\n    Version: '1.0'\r\n    Properties:\r\n      HardExpiry: !Ref HardExpiry\r\n      AllowUsersToChangePassword: !Ref AllowUsersToChangePassword\r\n      MaxPasswordAge: !Ref MaxPasswordAge\r\n      MinimumPasswordLength: !Ref MinimumPasswordLength\r\n      PasswordReusePrevention: !Ref PasswordReusePrevention\r\n      RequireLowercaseCharacters: !Ref RequireLowercaseCharacters\r\n      RequireNumbers: !Ref RequireNumbers\r\n      RequireSymbols: !Ref RequireSymbols\r\n      RequireUppercaseCharacters: !Ref RequireUppercaseCharacters\r\n      ServiceToken: !GetAtt 'LambdaFunctionV2.Arn'\r\n\r\nOutputs:\r\n  TemplateID:\r\n    Description: 'elevate account password policy'\r\n    Value: 'security/account-password-policy'\r\n  TemplateVersion:\r\n    Description: 'Account password policy version'\r\n    Value: '__VERSION__'\r\n  StackName:\r\n    Description: 'elevate-account-password-policy'\r\n    Value: !Sub '${AWS::StackName}'",
            "template_url": null,
            "timeout_in_minutes": 0,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19"
        }
      ]
    }
  ],
  "check_results": null
}
